merge_1, nearly_sorted/100000.txt, 0.002339
        merge_1, nearly_sorted/1000000.txt, 0.027513
merge_1, reverse_sorted/100000.txt, 0.002432
        merge_1, reverse_sorted/1000000.txt, 0.031350
merge_1, sorted/100000.txt, 0.002307
        merge_1, sorted/1000000.txt, 0.027764
merge_1, unif_rand/100000.txt, 0.007470
        merge_1, unif_rand/1000000.txt, 0.089912

(Só teve maior alteração na amostra aleatória)

merge_2, nearly_sorted/100000.txt, 0.001680
        merge_2, nearly_sorted/1000000.txt, 0.024199
merge_2, reverse_sorted/100000.txt, 0.001775
        merge_2, reverse_sorted/1000000.txt, 0.021473
merge_2, sorted/100000.txt, 0.001608
        merge_2, sorted/1000000.txt, 0.020537
merge_2, unif_rand/100000.txt, 0.006417
        merge_2, unif_rand/1000000.txt, 0.078998

(Só teve maior alteração na amostra aleatória)

merge_3, nearly_sorted/100000.txt, 0.000565
        merge_3, nearly_sorted/1000000.txt, 0.005182
merge_3, reverse_sorted/100000.txt, 0.002281
        merge_3, reverse_sorted/1000000.txt, 0.027937
merge_3, sorted/100000.txt, 0.000209
        merge_3, sorted/1000000.txt, 0.002152
merge_3, unif_rand/100000.txt, 0.007509
        merge_3, unif_rand/1000000.txt, 0.089377

(Melhora bastante quando é ordenado, total ou parcialmente)

merge_4, nearly_sorted/100000.txt, 0.000335
        merge_4, nearly_sorted/1000000.txt, 0.004278
merge_4, reverse_sorted/100000.txt, 0.001893
        merge_4, reverse_sorted/1000000.txt, 0.023754
merge_4, sorted/100000.txt, 0.000105
        merge_4, sorted/1000000.txt, 0.000961
merge_4, unif_rand/100000.txt, 0.006329
        merge_4, unif_rand/1000000.txt, 0.077569

(Melhora bastante quando é ordenado, total ou parcialmente)

merge_5, nearly_sorted/100000.txt, 0.002812
        merge_5, nearly_sorted/1000000.txt, 0.037684
merge_5, reverse_sorted/100000.txt, 0.002182
        merge_5, reverse_sorted/1000000.txt, 0.035510
merge_5, sorted/100000.txt, 0.002033
        merge_5, sorted/1000000.txt, 0.035570
merge_5, unif_rand/100000.txt, 0.007086
        merge_5, unif_rand/1000000.txt, 0.095105

(Só teve maior alteração na amostra aleatória)

merge_6, nearly_sorted/100000.txt, 0.002123
        merge_6, nearly_sorted/1000000.txt, 0.036902
merge_6, reverse_sorted/100000.txt, 0.001848
        merge_6, reverse_sorted/1000000.txt, 0.034476
merge_6, sorted/100000.txt, 0.002108
        merge_6, sorted/1000000.txt, 0.037839
merge_6, unif_rand/100000.txt, 0.006775
        merge_6, unif_rand/1000000.txt, 0.088680

(Só teve maior alteração na amostra aleatória)

merge_7, nearly_sorted/100000.txt, 0.000397
        merge_7, nearly_sorted/1000000.txt, 0.005951
merge_7, reverse_sorted/100000.txt, 0.002130
        merge_7, reverse_sorted/1000000.txt, 0.034740
merge_7, sorted/100000.txt, 0.000184
        merge_7, sorted/1000000.txt, 0.001780
merge_7, unif_rand/100000.txt, 0.006523
        merge_7, unif_rand/1000000.txt, 0.087168

(Melhora bastante quando é ordenado, total ou parcialmente)

Dados os resultados, a versão top-down com cut-off e merge skip parece a mais eficaz, pois não faz merges desnecessários,
usa o insert_sort como auxílio e é mais rápida no geral do que a bottom-up. Uma observação é que somente a melhoria do merge skip 
parece ser afetada pela ordenção, de modo positivo.